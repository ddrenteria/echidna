/home/lafhis/Desktop/tesis/ours/echidna/uniswap/libraries/LiquidityMath.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.5.0;
  3 |     | 
  4 |     | /// @title Math library for liquidity
  5 |     | library LiquidityMath {
  6 |     |     /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows
  7 |     |     /// @param x The liquidity before change
  8 |     |     /// @param y The delta by which liquidity should be changed
  9 |     |     /// @return z The liquidity delta
 10 | *   |     function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {
 11 | *   |         if (y < 0) {
 12 | *   |             require((z = x - uint128(-y)) < x, 'LS');
 13 |     |         } else {
 14 | *   |             require((z = x + uint128(y)) >= x, 'LA');
 15 |     |         }
 16 |     |     }
 17 |     | }
 18 |     | 

/home/lafhis/Desktop/tesis/ours/echidna/uniswap/libraries/LowGasSafeMath.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.7.0;
  3 |     | 
  4 |     | /// @title Optimized overflow and underflow safe math operations
  5 |     | /// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost
  6 |     | library LowGasSafeMath {
  7 |     |     /// @notice Returns x + y, reverts if sum overflows uint256
  8 |     |     /// @param x The augend
  9 |     |     /// @param y The addend
 10 |     |     /// @return z The sum of x and y
 11 |     |     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
 12 |     |         require((z = x + y) >= x);
 13 |     |     }
 14 |     | 
 15 |     |     /// @notice Returns x - y, reverts if underflows
 16 |     |     /// @param x The minuend
 17 |     |     /// @param y The subtrahend
 18 |     |     /// @return z The difference of x and y
 19 |     |     function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
 20 |     |         require((z = x - y) <= x);
 21 |     |     }
 22 |     | 
 23 |     |     /// @notice Returns x * y, reverts if overflows
 24 |     |     /// @param x The multiplicand
 25 |     |     /// @param y The multiplier
 26 |     |     /// @return z The product of x and y
 27 |     |     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
 28 |     |         require(x == 0 || (z = x * y) / x == y);
 29 |     |     }
 30 |     | 
 31 |     |     /// @notice Returns x + y, reverts if overflows or underflows
 32 |     |     /// @param x The augend
 33 |     |     /// @param y The addend
 34 |     |     /// @return z The sum of x and y
 35 | *   |     function add(int256 x, int256 y) internal pure returns (int256 z) {
 36 | *   |         require((z = x + y) >= x == (y >= 0));
 37 |     |     }
 38 |     | 
 39 |     |     /// @notice Returns x - y, reverts if overflows or underflows
 40 |     |     /// @param x The minuend
 41 |     |     /// @param y The subtrahend
 42 |     |     /// @return z The difference of x and y
 43 | *   |     function sub(int256 x, int256 y) internal pure returns (int256 z) {
 44 | *   |         require((z = x - y) <= x == (y >= 0));
 45 |     |     }
 46 |     | }
 47 |     | 

/home/lafhis/Desktop/tesis/ours/echidna/uniswap/libraries/SafeCast.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity >=0.5.0;
  3 |     | 
  4 |     | /// @title Safe casting methods
  5 |     | /// @notice Contains methods for safely casting between types
  6 |     | library SafeCast {
  7 |     |     /// @notice Cast a uint256 to a uint160, revert on overflow
  8 |     |     /// @param y The uint256 to be downcasted
  9 |     |     /// @return z The downcasted integer, now type uint160
 10 |     |     function toUint160(uint256 y) internal pure returns (uint160 z) {
 11 |     |         require((z = uint160(y)) == y);
 12 |     |     }
 13 |     | 
 14 |     |     /// @notice Cast a int256 to a int128, revert on overflow or underflow
 15 |     |     /// @param y The int256 to be downcasted
 16 |     |     /// @return z The downcasted integer, now type int128
 17 | *   |     function toInt128(int256 y) internal pure returns (int128 z) {
 18 | *   |         require((z = int128(y)) == y);
 19 |     |     }
 20 |     | 
 21 |     |     /// @notice Cast a uint256 to a int256, revert on overflow
 22 |     |     /// @param y The uint256 to be casted
 23 |     |     /// @return z The casted integer, now type int256
 24 |     |     function toInt256(uint256 y) internal pure returns (int256 z) {
 25 |     |         require(y < 2**255);
 26 |     |         z = int256(y);
 27 |     |     }
 28 |     | }
 29 |     | 

/home/lafhis/Desktop/tesis/ours/echidna/uniswap/libraries/Tick.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity >=0.5.0 <0.8.0;
   3 |     | 
   4 |     | import './LowGasSafeMath.sol';
   5 |     | import './SafeCast.sol';
   6 |     | 
   7 |     | import './TickMath.sol';
   8 |     | import './LiquidityMath.sol';
   9 |     | 
  10 |     | /// @title Tick
  11 |     | /// @notice Contains functions for managing tick processes and relevant calculations
  12 |     | library Tick {
  13 |     |     using LowGasSafeMath for int256;
  14 |     |     using SafeCast for int256;
  15 |     | 
  16 |     |     // info stored for each initialized individual tick
  17 |     |     struct Info {
  18 |     |         // the total position liquidity that references this tick
  19 |     |         uint128 liquidityGross;
  20 |     |         // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),
  21 |     |         int128 liquidityNet;
  22 |     |         // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)
  23 |     |         // only has relative meaning, not absolute — the value depends on when the tick is initialized
  24 |     |         uint256 feeGrowthOutside0X128;
  25 |     |         uint256 feeGrowthOutside1X128;
  26 |     |         // the cumulative tick value on the other side of the tick
  27 |     |         int56 tickCumulativeOutside;
  28 |     |         // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)
  29 |     |         // only has relative meaning, not absolute — the value depends on when the tick is initialized
  30 |     |         uint160 secondsPerLiquidityOutsideX128;
  31 |     |         // the seconds spent on the other side of the tick (relative to the current tick)
  32 |     |         // only has relative meaning, not absolute — the value depends on when the tick is initialized
  33 |     |         uint32 secondsOutside;
  34 |     |         // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0
  35 |     |         // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks
  36 |     |         bool initialized;
  37 |     |     }
  38 |     | 
  39 |     |     /// @notice Derives max liquidity per tick from given tick spacing
  40 |     |     /// @dev Executed within the pool constructor
  41 |     |     /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`
  42 |     |     ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...
  43 |     |     /// @return The max liquidity per tick
  44 |     |     function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {
  45 |     |         int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;
  46 |     |         int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;
  47 |     |         uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;
  48 |     |         return type(uint128).max / numTicks;
  49 |     |     }
  50 |     | 
  51 |     |     /// @notice Retrieves fee growth data
  52 |     |     /// @param self The mapping containing all tick information for initialized ticks
  53 |     |     /// @param tickLower The lower tick boundary of the position
  54 |     |     /// @param tickUpper The upper tick boundary of the position
  55 |     |     /// @param tickCurrent The current tick
  56 |     |     /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0
  57 |     |     /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1
  58 |     |     /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries
  59 |     |     /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries
  60 |     |     function getFeeGrowthInside(
  61 |     |         mapping(int24 => Tick.Info) storage self,
  62 |     |         int24 tickLower,
  63 |     |         int24 tickUpper,
  64 |     |         int24 tickCurrent,
  65 |     |         uint256 feeGrowthGlobal0X128,
  66 |     |         uint256 feeGrowthGlobal1X128
  67 |     |     ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {
  68 |     |         Info storage lower = self[tickLower];
  69 |     |         Info storage upper = self[tickUpper];
  70 |     | 
  71 |     |         // calculate fee growth below
  72 |     |         uint256 feeGrowthBelow0X128;
  73 |     |         uint256 feeGrowthBelow1X128;
  74 |     |         if (tickCurrent >= tickLower) {
  75 |     |             feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;
  76 |     |             feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;
  77 |     |         } else {
  78 |     |             feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;
  79 |     |             feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;
  80 |     |         }
  81 |     | 
  82 |     |         // calculate fee growth above
  83 |     |         uint256 feeGrowthAbove0X128;
  84 |     |         uint256 feeGrowthAbove1X128;
  85 |     |         if (tickCurrent < tickUpper) {
  86 |     |             feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;
  87 |     |             feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;
  88 |     |         } else {
  89 |     |             feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;
  90 |     |             feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;
  91 |     |         }
  92 |     | 
  93 |     |         feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;
  94 |     |         feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;
  95 |     |     }
  96 |     | 
  97 |     |     /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa
  98 |     |     /// @param self The mapping containing all tick information for initialized ticks
  99 |     |     /// @param tick The tick that will be updated
 100 |     |     /// @param tickCurrent The current tick
 101 |     |     /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)
 102 |     |     /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0
 103 |     |     /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1
 104 |     |     /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool
 105 |     |     /// @param tickCumulative The tick * time elapsed since the pool was first initialized
 106 |     |     /// @param time The current block timestamp cast to a uint32
 107 |     |     /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick
 108 |     |     /// @param maxLiquidity The maximum liquidity allocation for a single tick
 109 |     |     /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa
 110 | *   |     function update(
 111 |     |         mapping(int24 => Tick.Info) storage self,
 112 |     |         int24 tick,
 113 |     |         int24 tickCurrent,
 114 |     |         int128 liquidityDelta,
 115 |     |         uint256 feeGrowthGlobal0X128,
 116 |     |         uint256 feeGrowthGlobal1X128,
 117 |     |         uint160 secondsPerLiquidityCumulativeX128,
 118 |     |         int56 tickCumulative,
 119 |     |         uint32 time,
 120 |     |         bool upper,
 121 |     |         uint128 maxLiquidity
 122 | *   |     ) internal returns (bool flipped) {
 123 | *   |         Tick.Info storage info = self[tick];
 124 |     | 
 125 | *   |         uint128 liquidityGrossBefore = info.liquidityGross;
 126 | *   |         uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);
 127 |     | 
 128 | *   |         require(liquidityGrossAfter <= maxLiquidity, 'LO');
 129 |     | 
 130 | *   |         flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);
 131 |     | 
 132 | *   |         if (liquidityGrossBefore == 0) {
 133 |     |             // by convention, we assume that all growth before a tick was initialized happened _below_ the tick
 134 | *   |             if (tick <= tickCurrent) {
 135 | *   |                 info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;
 136 | *   |                 info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;
 137 | *   |                 info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;
 138 | *   |                 info.tickCumulativeOutside = tickCumulative;
 139 | *   |                 info.secondsOutside = time;
 140 |     |             }
 141 | *   |             info.initialized = true;
 142 |     |         }
 143 |     | 
 144 | *   |         info.liquidityGross = liquidityGrossAfter;
 145 |     | 
 146 |     |         // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)
 147 | *   |         info.liquidityNet = upper
 148 | *   |             ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()
 149 | *   |             : int256(info.liquidityNet).add(liquidityDelta).toInt128();
 150 |     |     }
 151 |     | 
 152 |     |     /// @notice Clears tick data
 153 |     |     /// @param self The mapping containing all initialized tick information for initialized ticks
 154 |     |     /// @param tick The tick that will be cleared
 155 | *   |     function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {
 156 | *   |         delete self[tick];
 157 |     |     }
 158 |     | 
 159 |     |     /// @notice Transitions to next tick as needed by price movement
 160 |     |     /// @param self The mapping containing all tick information for initialized ticks
 161 |     |     /// @param tick The destination tick of the transition
 162 |     |     /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0
 163 |     |     /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1
 164 |     |     /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity
 165 |     |     /// @param tickCumulative The tick * time elapsed since the pool was first initialized
 166 |     |     /// @param time The current block.timestamp
 167 |     |     /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)
 168 | *   |     function cross(
 169 |     |         mapping(int24 => Tick.Info) storage self,
 170 |     |         int24 tick,
 171 |     |         uint256 feeGrowthGlobal0X128,
 172 |     |         uint256 feeGrowthGlobal1X128,
 173 |     |         uint160 secondsPerLiquidityCumulativeX128,
 174 |     |         int56 tickCumulative,
 175 |     |         uint32 time
 176 | *   |     ) internal returns (int128 liquidityNet) {
 177 | *   |         Tick.Info storage info = self[tick];
 178 | *   |         info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;
 179 | *   |         info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;
 180 | *   |         info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;
 181 | *   |         info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;
 182 | *   |         info.secondsOutside = time - info.secondsOutside;
 183 | *   |         liquidityNet = info.liquidityNet;
 184 |     |     }
 185 |     | }
 186 |     | 

/home/lafhis/Desktop/tesis/ours/echidna/uniswap/libraries/TickMath.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.5.0 <0.8.0;
   3 |     | 
   4 |     | /// @title Math library for computing sqrt prices from ticks and vice versa
   5 |     | /// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports
   6 |     | /// prices between 2**-128 and 2**128
   7 |     | library TickMath {
   8 |     |     /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128
   9 |     |     int24 internal constant MIN_TICK = -887272;
  10 |     |     /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128
  11 |     |     int24 internal constant MAX_TICK = -MIN_TICK;
  12 |     | 
  13 |     |     /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)
  14 |     |     uint160 internal constant MIN_SQRT_RATIO = 4295128739;
  15 |     |     /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)
  16 |     |     uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;
  17 |     | 
  18 |     |     /// @notice Calculates sqrt(1.0001^tick) * 2^96
  19 |     |     /// @dev Throws if |tick| > max tick
  20 |     |     /// @param tick The input tick for the above formula
  21 |     |     /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)
  22 |     |     /// at the given tick
  23 |     |     function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {
  24 |     |         uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));
  25 |     |         require(absTick <= uint256(MAX_TICK), 'T');
  26 |     | 
  27 |     |         uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;
  28 |     |         if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
  29 |     |         if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
  30 |     |         if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
  31 |     |         if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
  32 |     |         if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
  33 |     |         if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
  34 |     |         if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
  35 |     |         if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
  36 |     |         if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
  37 |     |         if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
  38 |     |         if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
  39 |     |         if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
  40 |     |         if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
  41 |     |         if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
  42 |     |         if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
  43 |     |         if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
  44 |     |         if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
  45 |     |         if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
  46 |     |         if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
  47 |     | 
  48 |     |         if (tick > 0) ratio = type(uint256).max / ratio;
  49 |     | 
  50 |     |         // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.
  51 |     |         // we then downcast because we know the result always fits within 160 bits due to our tick input constraint
  52 |     |         // we round up in the division so getTickAtSqrtRatio of the output price is always consistent
  53 |     |         sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));
  54 |     |     }
  55 |     | 
  56 |     |     /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio
  57 |     |     /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may
  58 |     |     /// ever return.
  59 |     |     /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96
  60 |     |     /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio
  61 |     |     function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {
  62 |     |         // second inequality must be < because the price can never reach the price at the max tick
  63 |     |         require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');
  64 |     |         uint256 ratio = uint256(sqrtPriceX96) << 32;
  65 |     | 
  66 |     |         uint256 r = ratio;
  67 |     |         uint256 msb = 0;
  68 |     | 
  69 |     |         assembly {
  70 |     |             let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))
  71 |     |             msb := or(msb, f)
  72 |     |             r := shr(f, r)
  73 |     |         }
  74 |     |         assembly {
  75 |     |             let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))
  76 |     |             msb := or(msb, f)
  77 |     |             r := shr(f, r)
  78 |     |         }
  79 |     |         assembly {
  80 |     |             let f := shl(5, gt(r, 0xFFFFFFFF))
  81 |     |             msb := or(msb, f)
  82 |     |             r := shr(f, r)
  83 |     |         }
  84 |     |         assembly {
  85 |     |             let f := shl(4, gt(r, 0xFFFF))
  86 |     |             msb := or(msb, f)
  87 |     |             r := shr(f, r)
  88 |     |         }
  89 |     |         assembly {
  90 |     |             let f := shl(3, gt(r, 0xFF))
  91 |     |             msb := or(msb, f)
  92 |     |             r := shr(f, r)
  93 |     |         }
  94 |     |         assembly {
  95 |     |             let f := shl(2, gt(r, 0xF))
  96 |     |             msb := or(msb, f)
  97 |     |             r := shr(f, r)
  98 |     |         }
  99 |     |         assembly {
 100 |     |             let f := shl(1, gt(r, 0x3))
 101 |     |             msb := or(msb, f)
 102 |     |             r := shr(f, r)
 103 |     |         }
 104 |     |         assembly {
 105 |     |             let f := gt(r, 0x1)
 106 |     |             msb := or(msb, f)
 107 |     |         }
 108 |     | 
 109 |     |         if (msb >= 128) r = ratio >> (msb - 127);
 110 |     |         else r = ratio << (127 - msb);
 111 |     | 
 112 |     |         int256 log_2 = (int256(msb) - 128) << 64;
 113 |     | 
 114 |     |         assembly {
 115 |     |             r := shr(127, mul(r, r))
 116 |     |             let f := shr(128, r)
 117 |     |             log_2 := or(log_2, shl(63, f))
 118 |     |             r := shr(f, r)
 119 |     |         }
 120 |     |         assembly {
 121 |     |             r := shr(127, mul(r, r))
 122 |     |             let f := shr(128, r)
 123 |     |             log_2 := or(log_2, shl(62, f))
 124 |     |             r := shr(f, r)
 125 |     |         }
 126 |     |         assembly {
 127 |     |             r := shr(127, mul(r, r))
 128 |     |             let f := shr(128, r)
 129 |     |             log_2 := or(log_2, shl(61, f))
 130 |     |             r := shr(f, r)
 131 |     |         }
 132 |     |         assembly {
 133 |     |             r := shr(127, mul(r, r))
 134 |     |             let f := shr(128, r)
 135 |     |             log_2 := or(log_2, shl(60, f))
 136 |     |             r := shr(f, r)
 137 |     |         }
 138 |     |         assembly {
 139 |     |             r := shr(127, mul(r, r))
 140 |     |             let f := shr(128, r)
 141 |     |             log_2 := or(log_2, shl(59, f))
 142 |     |             r := shr(f, r)
 143 |     |         }
 144 |     |         assembly {
 145 |     |             r := shr(127, mul(r, r))
 146 |     |             let f := shr(128, r)
 147 |     |             log_2 := or(log_2, shl(58, f))
 148 |     |             r := shr(f, r)
 149 |     |         }
 150 |     |         assembly {
 151 |     |             r := shr(127, mul(r, r))
 152 |     |             let f := shr(128, r)
 153 |     |             log_2 := or(log_2, shl(57, f))
 154 |     |             r := shr(f, r)
 155 |     |         }
 156 |     |         assembly {
 157 |     |             r := shr(127, mul(r, r))
 158 |     |             let f := shr(128, r)
 159 |     |             log_2 := or(log_2, shl(56, f))
 160 |     |             r := shr(f, r)
 161 |     |         }
 162 |     |         assembly {
 163 |     |             r := shr(127, mul(r, r))
 164 |     |             let f := shr(128, r)
 165 |     |             log_2 := or(log_2, shl(55, f))
 166 |     |             r := shr(f, r)
 167 |     |         }
 168 |     |         assembly {
 169 |     |             r := shr(127, mul(r, r))
 170 |     |             let f := shr(128, r)
 171 |     |             log_2 := or(log_2, shl(54, f))
 172 |     |             r := shr(f, r)
 173 |     |         }
 174 |     |         assembly {
 175 |     |             r := shr(127, mul(r, r))
 176 |     |             let f := shr(128, r)
 177 |     |             log_2 := or(log_2, shl(53, f))
 178 |     |             r := shr(f, r)
 179 |     |         }
 180 |     |         assembly {
 181 |     |             r := shr(127, mul(r, r))
 182 |     |             let f := shr(128, r)
 183 |     |             log_2 := or(log_2, shl(52, f))
 184 |     |             r := shr(f, r)
 185 |     |         }
 186 |     |         assembly {
 187 |     |             r := shr(127, mul(r, r))
 188 |     |             let f := shr(128, r)
 189 |     |             log_2 := or(log_2, shl(51, f))
 190 |     |             r := shr(f, r)
 191 |     |         }
 192 |     |         assembly {
 193 |     |             r := shr(127, mul(r, r))
 194 |     |             let f := shr(128, r)
 195 |     |             log_2 := or(log_2, shl(50, f))
 196 |     |         }
 197 |     | 
 198 |     |         int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number
 199 |     | 
 200 |     |         int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);
 201 |     |         int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);
 202 |     | 
 203 |     |         tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;
 204 |     |     }
 205 |     | }
 206 |     | 

/home/lafhis/Desktop/tesis/ours/echidna/uniswap/test/TickOverflowSafetyEchidnaTest.sol
   1 |     | // SPDX-License-Identifier: UNLICENSED
   2 |     | pragma solidity =0.7.6;
   3 |     | 
   4 |     | import '../libraries/Tick.sol';
   5 |     | 
   6 | *   | contract TickOverflowSafetyEchidnaTest {
   7 |     |     using Tick for mapping(int24 => Tick.Info);
   8 |     | 
   9 | *   |     int24 private constant MIN_TICK = -16;
  10 | *   |     int24 private constant MAX_TICK = 16;
  11 | *   |     uint128 private constant MAX_LIQUIDITY = type(uint128).max / 32;
  12 |     | 
  13 |     |     mapping(int24 => Tick.Info) private ticks;
  14 |     |     int24 private tick = 0;
  15 |     | 
  16 |     |     // used to track how much total liquidity has been added. should never be negative
  17 |     |     int256 totalLiquidity = 0;
  18 |     |     // half the cap of fee growth has happened, this can overflow
  19 |     |     uint256 private feeGrowthGlobal0X128 = type(uint256).max / 2;
  20 |     |     uint256 private feeGrowthGlobal1X128 = type(uint256).max / 2;
  21 |     |     // how much total growth has happened, this cannot overflow
  22 |     |     uint256 private totalGrowth0 = 0;
  23 |     |     uint256 private totalGrowth1 = 0;
  24 |     | 
  25 | *   |     function increaseFeeGrowthGlobal0X128(uint256 amount) external {
  26 | *   |         require(totalGrowth0 + amount > totalGrowth0); // overflow check
  27 | *   |         feeGrowthGlobal0X128 += amount; // overflow desired
  28 | *   |         totalGrowth0 += amount;
  29 |     |     }
  30 |     | 
  31 | *   |     function increaseFeeGrowthGlobal1X128(uint256 amount) external {
  32 | *   |         require(totalGrowth1 + amount > totalGrowth1); // overflow check
  33 | *   |         feeGrowthGlobal1X128 += amount; // overflow desired
  34 | *   |         totalGrowth1 += amount;
  35 |     |     }
  36 |     | 
  37 | *   |     function setPosition(
  38 |     |         int24 tickLower,
  39 |     |         int24 tickUpper,
  40 |     |         int128 liquidityDelta
  41 |     |     ) external {
  42 | *   |         require(tickLower > MIN_TICK);
  43 | *   |         require(tickUpper < MAX_TICK);
  44 | *   |         require(tickLower < tickUpper);
  45 | *   |         bool flippedLower =
  46 | *   |             ticks.update(
  47 | *   |                 tickLower,
  48 | *   |                 tick,
  49 | *   |                 liquidityDelta,
  50 | *   |                 feeGrowthGlobal0X128,
  51 | *   |                 feeGrowthGlobal1X128,
  52 | *   |                 0,
  53 | *   |                 0,
  54 | *   |                 uint32(block.timestamp),
  55 | *   |                 false,
  56 |     |                 MAX_LIQUIDITY
  57 |     |             );
  58 | *   |         bool flippedUpper =
  59 | *   |             ticks.update(
  60 | *   |                 tickUpper,
  61 | *   |                 tick,
  62 | *   |                 liquidityDelta,
  63 | *   |                 feeGrowthGlobal0X128,
  64 | *   |                 feeGrowthGlobal1X128,
  65 | *   |                 0,
  66 | *   |                 0,
  67 | *   |                 uint32(block.timestamp),
  68 | *   |                 true,
  69 |     |                 MAX_LIQUIDITY
  70 |     |             );
  71 |     | 
  72 | *   |         if (flippedLower) {
  73 | *   |             if (liquidityDelta < 0) {
  74 |     |                 assert(ticks[tickLower].liquidityGross == 0);
  75 |     |                 ticks.clear(tickLower);
  76 | *   |             } else assert(ticks[tickLower].liquidityGross > 0);
  77 |     |         }
  78 |     | 
  79 | *   |         if (flippedUpper) {
  80 | *   |             if (liquidityDelta < 0) {
  81 | *   |                 assert(ticks[tickUpper].liquidityGross == 0);
  82 | *   |                 ticks.clear(tickUpper);
  83 | *   |             } else assert(ticks[tickUpper].liquidityGross > 0);
  84 |     |         }
  85 |     | 
  86 | *   |         totalLiquidity += liquidityDelta;
  87 |     |         // requires should have prevented this
  88 | *   |         assert(totalLiquidity >= 0);
  89 |     | 
  90 | *   |         if (totalLiquidity == 0) {
  91 | *   |             totalGrowth0 = 0;
  92 | *   |             totalGrowth1 = 0;
  93 |     |         }
  94 |     |     }
  95 |     | 
  96 | *   |     function moveToTick(int24 target) external {
  97 | *   |         require(target > MIN_TICK);
  98 | *   |         require(target < MAX_TICK);
  99 | *   |         while (tick != target) {
 100 | *   |             if (tick < target) {
 101 | *   |                 if (ticks[tick + 1].liquidityGross > 0)
 102 | *   |                     ticks.cross(tick + 1, feeGrowthGlobal0X128, feeGrowthGlobal1X128, 0, 0, uint32(block.timestamp));
 103 | *   |                 tick++;
 104 |     |             } else {
 105 | *   |                 if (ticks[tick].liquidityGross > 0)
 106 | *   |                     ticks.cross(tick, feeGrowthGlobal0X128, feeGrowthGlobal1X128, 0, 0, uint32(block.timestamp));
 107 | *   |                 tick--;
 108 |     |             }
 109 |     |         }
 110 |     |     }
 111 |     | }
 112 |     | 


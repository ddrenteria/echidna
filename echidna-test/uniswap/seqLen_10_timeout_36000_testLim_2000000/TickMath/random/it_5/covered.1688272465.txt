/home/lafhis/Desktop/tesis/ours/echidna/uniswap/libraries/TickMath.sol
   1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
   2 |     | pragma solidity >=0.5.0 <0.8.0;
   3 |     | 
   4 |     | /// @title Math library for computing sqrt prices from ticks and vice versa
   5 |     | /// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports
   6 |     | /// prices between 2**-128 and 2**128
   7 |     | library TickMath {
   8 |     |     /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128
   9 | *   |     int24 internal constant MIN_TICK = -887272;
  10 |     |     /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128
  11 | *   |     int24 internal constant MAX_TICK = -MIN_TICK;
  12 |     | 
  13 |     |     /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)
  14 | *   |     uint160 internal constant MIN_SQRT_RATIO = 4295128739;
  15 |     |     /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)
  16 | *   |     uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;
  17 |     | 
  18 |     |     /// @notice Calculates sqrt(1.0001^tick) * 2^96
  19 |     |     /// @dev Throws if |tick| > max tick
  20 |     |     /// @param tick The input tick for the above formula
  21 |     |     /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)
  22 |     |     /// at the given tick
  23 | *   |     function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {
  24 | *   |         uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));
  25 | *   |         require(absTick <= uint256(MAX_TICK), 'T');
  26 |     | 
  27 | *   |         uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;
  28 | *   |         if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
  29 | *   |         if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
  30 | *   |         if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
  31 | *   |         if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
  32 | *   |         if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
  33 | *   |         if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
  34 | *   |         if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
  35 | *   |         if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
  36 | *   |         if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
  37 | *   |         if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
  38 | *   |         if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
  39 | *   |         if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
  40 | *   |         if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
  41 | *   |         if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
  42 | *   |         if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
  43 | *   |         if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
  44 | *   |         if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
  45 | *   |         if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
  46 | *   |         if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
  47 |     | 
  48 | *   |         if (tick > 0) ratio = type(uint256).max / ratio;
  49 |     | 
  50 |     |         // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.
  51 |     |         // we then downcast because we know the result always fits within 160 bits due to our tick input constraint
  52 |     |         // we round up in the division so getTickAtSqrtRatio of the output price is always consistent
  53 | *   |         sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));
  54 |     |     }
  55 |     | 
  56 |     |     /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio
  57 |     |     /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may
  58 |     |     /// ever return.
  59 |     |     /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96
  60 |     |     /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio
  61 | *   |     function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {
  62 |     |         // second inequality must be < because the price can never reach the price at the max tick
  63 | *   |         require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');
  64 | *   |         uint256 ratio = uint256(sqrtPriceX96) << 32;
  65 |     | 
  66 | *   |         uint256 r = ratio;
  67 | *   |         uint256 msb = 0;
  68 |     | 
  69 | *   |         assembly {
  70 | *   |             let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))
  71 | *   |             msb := or(msb, f)
  72 | *   |             r := shr(f, r)
  73 |     |         }
  74 | *   |         assembly {
  75 | *   |             let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))
  76 | *   |             msb := or(msb, f)
  77 | *   |             r := shr(f, r)
  78 |     |         }
  79 | *   |         assembly {
  80 | *   |             let f := shl(5, gt(r, 0xFFFFFFFF))
  81 | *   |             msb := or(msb, f)
  82 | *   |             r := shr(f, r)
  83 |     |         }
  84 | *   |         assembly {
  85 | *   |             let f := shl(4, gt(r, 0xFFFF))
  86 | *   |             msb := or(msb, f)
  87 | *   |             r := shr(f, r)
  88 |     |         }
  89 | *   |         assembly {
  90 | *   |             let f := shl(3, gt(r, 0xFF))
  91 | *   |             msb := or(msb, f)
  92 | *   |             r := shr(f, r)
  93 |     |         }
  94 | *   |         assembly {
  95 | *   |             let f := shl(2, gt(r, 0xF))
  96 | *   |             msb := or(msb, f)
  97 | *   |             r := shr(f, r)
  98 |     |         }
  99 | *   |         assembly {
 100 | *   |             let f := shl(1, gt(r, 0x3))
 101 | *   |             msb := or(msb, f)
 102 | *   |             r := shr(f, r)
 103 |     |         }
 104 | *   |         assembly {
 105 | *   |             let f := gt(r, 0x1)
 106 | *   |             msb := or(msb, f)
 107 |     |         }
 108 |     | 
 109 | *   |         if (msb >= 128) r = ratio >> (msb - 127);
 110 | *   |         else r = ratio << (127 - msb);
 111 |     | 
 112 | *   |         int256 log_2 = (int256(msb) - 128) << 64;
 113 |     | 
 114 | *   |         assembly {
 115 | *   |             r := shr(127, mul(r, r))
 116 | *   |             let f := shr(128, r)
 117 | *   |             log_2 := or(log_2, shl(63, f))
 118 | *   |             r := shr(f, r)
 119 |     |         }
 120 | *   |         assembly {
 121 | *   |             r := shr(127, mul(r, r))
 122 | *   |             let f := shr(128, r)
 123 | *   |             log_2 := or(log_2, shl(62, f))
 124 | *   |             r := shr(f, r)
 125 |     |         }
 126 | *   |         assembly {
 127 | *   |             r := shr(127, mul(r, r))
 128 | *   |             let f := shr(128, r)
 129 | *   |             log_2 := or(log_2, shl(61, f))
 130 | *   |             r := shr(f, r)
 131 |     |         }
 132 | *   |         assembly {
 133 | *   |             r := shr(127, mul(r, r))
 134 | *   |             let f := shr(128, r)
 135 | *   |             log_2 := or(log_2, shl(60, f))
 136 | *   |             r := shr(f, r)
 137 |     |         }
 138 | *   |         assembly {
 139 | *   |             r := shr(127, mul(r, r))
 140 | *   |             let f := shr(128, r)
 141 | *   |             log_2 := or(log_2, shl(59, f))
 142 | *   |             r := shr(f, r)
 143 |     |         }
 144 | *   |         assembly {
 145 | *   |             r := shr(127, mul(r, r))
 146 | *   |             let f := shr(128, r)
 147 | *   |             log_2 := or(log_2, shl(58, f))
 148 | *   |             r := shr(f, r)
 149 |     |         }
 150 | *   |         assembly {
 151 | *   |             r := shr(127, mul(r, r))
 152 | *   |             let f := shr(128, r)
 153 | *   |             log_2 := or(log_2, shl(57, f))
 154 | *   |             r := shr(f, r)
 155 |     |         }
 156 | *   |         assembly {
 157 | *   |             r := shr(127, mul(r, r))
 158 | *   |             let f := shr(128, r)
 159 | *   |             log_2 := or(log_2, shl(56, f))
 160 | *   |             r := shr(f, r)
 161 |     |         }
 162 | *   |         assembly {
 163 | *   |             r := shr(127, mul(r, r))
 164 | *   |             let f := shr(128, r)
 165 | *   |             log_2 := or(log_2, shl(55, f))
 166 | *   |             r := shr(f, r)
 167 |     |         }
 168 | *   |         assembly {
 169 | *   |             r := shr(127, mul(r, r))
 170 | *   |             let f := shr(128, r)
 171 | *   |             log_2 := or(log_2, shl(54, f))
 172 | *   |             r := shr(f, r)
 173 |     |         }
 174 | *   |         assembly {
 175 | *   |             r := shr(127, mul(r, r))
 176 | *   |             let f := shr(128, r)
 177 | *   |             log_2 := or(log_2, shl(53, f))
 178 | *   |             r := shr(f, r)
 179 |     |         }
 180 | *   |         assembly {
 181 | *   |             r := shr(127, mul(r, r))
 182 | *   |             let f := shr(128, r)
 183 | *   |             log_2 := or(log_2, shl(52, f))
 184 | *   |             r := shr(f, r)
 185 |     |         }
 186 | *   |         assembly {
 187 | *   |             r := shr(127, mul(r, r))
 188 | *   |             let f := shr(128, r)
 189 | *   |             log_2 := or(log_2, shl(51, f))
 190 | *   |             r := shr(f, r)
 191 |     |         }
 192 | *   |         assembly {
 193 | *   |             r := shr(127, mul(r, r))
 194 | *   |             let f := shr(128, r)
 195 | *   |             log_2 := or(log_2, shl(50, f))
 196 |     |         }
 197 |     | 
 198 | *   |         int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number
 199 |     | 
 200 | *   |         int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);
 201 | *   |         int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);
 202 |     | 
 203 | *   |         tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;
 204 |     |     }
 205 |     | }
 206 |     | 

/home/lafhis/Desktop/tesis/ours/echidna/uniswap/test/TickMathEchidnaTest.sol
  1 |     | // SPDX-License-Identifier: UNLICENSED
  2 |     | pragma solidity =0.7.6;
  3 |     | 
  4 |     | import '../libraries/TickMath.sol';
  5 |     | 
  6 | *   | contract TickMathEchidnaTest {
  7 |     |     // uniqueness and increasing order
  8 | *   |     function checkGetSqrtRatioAtTickInvariants(int24 tick) external pure {
  9 | *   |         uint160 ratio = TickMath.getSqrtRatioAtTick(tick);
 10 | *   |         assert(TickMath.getSqrtRatioAtTick(tick - 1) < ratio && ratio < TickMath.getSqrtRatioAtTick(tick + 1));
 11 | *   |         assert(ratio >= TickMath.MIN_SQRT_RATIO);
 12 | *   |         assert(ratio <= TickMath.MAX_SQRT_RATIO);
 13 |     |     }
 14 |     | 
 15 |     |     // the ratio is always between the returned tick and the returned tick+1
 16 | *   |     function checkGetTickAtSqrtRatioInvariants(uint160 ratio) external pure {
 17 | *   |         int24 tick = TickMath.getTickAtSqrtRatio(ratio);
 18 | *   |         assert(ratio >= TickMath.getSqrtRatioAtTick(tick) && ratio < TickMath.getSqrtRatioAtTick(tick + 1));
 19 | *   |         assert(tick >= TickMath.MIN_TICK);
 20 | *   |         assert(tick < TickMath.MAX_TICK);
 21 |     |     }
 22 |     | }
 23 |     | 

